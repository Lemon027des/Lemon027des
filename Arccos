pip install transformers
# Для работы с моделями, требующими GPU, установите PyTorch или TensorFlow:
pip install torch  # или tensorflow
from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Загрузка токенизатора и модели
model_name = "bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)

# Токенизация текста
text = "I love machine learning!"
inputs = tokenizer(text, return_tensors="pt")

# Предсказание
outputs = model(**inputs)
logits = outputs.logits
print(logits)

from transformers import pipeline

classifier = pipeline("text-classification", model="distilbert-base-uncased-finetuned-sst-2-english")
result = classifier("This movie is awesome!")
print(result)  # [{'label': 'POSITIVE', 'score': 0.9998}]

from transformers import pipeline

generator = pipeline("text-generation", model="gpt2")
text = generator("In the future, AI will", max_length=50, num_return_sequences=2)
print(text)

from transformers import pipeline

ner = pipeline("ner", model="dbmdz/bert-large-cased-finetuned-conll03-english")
result = ner("Hugging Face is a company based in New York.")
print(result)

from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
import torch
from datasets import load_dataset

# Загрузка данных
dataset = load_dataset("imdb")

# Токенизация
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

# Модель
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

# Аргументы обучения
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=3,
    per_device_train_batch_size=16,
    evaluation_strategy="epoch"
)

# Тренировка
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["test"]
)

trainer.train()
